{"ast":null,"code":"var _jsxFileName = \"/Users/mac/PycharmProjects/Hackathon/hack/Reverse-Image-Search-Ecommerce/React/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport ProductContainer from '../../components/product/product.container';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container'; // import WithSpinner from './../../components/with-spinner/with-spinner.component';\n// import { createStructuredSelector } from 'reselect';\n\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from './../../redux/shop/shop.selectors';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { connect } from 'react-redux'; // const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n// const ProductWithSpinner = WithSpinner(Product);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    // const {updateCollections} = this.props;\n    // const CollectionRef = firestore.collection('collections');\n    //METHOD 1 ORIGINAL WAY TAUGHT\n    // this.unsubscribeFromSnapshot = CollectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // })\n    //METHOD 2 - USING PROMISES\n    // CollectionRef.get().then(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // })\n    // USING FETCH\n    // fetch('https://firestore.googleapis.com/v1/projects/crown-db/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections))\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionLoaded\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}` // render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props} />} \n      ,\n      component: CollectionsOverviewContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId` // render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionLoaded} {...props}/>}\n      ,\n      component: CollectionPageContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId/:anyId` // render={(props) => <ProductWithSpinner isLoading={!isCollectionLoaded} {...props} />}   \n      ,\n      component: ProductContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }\n    }));\n  }\n\n} // const mapStateToProps = createStructuredSelector({\n//   isCollectionFetching: selectIsCollectionFetching,\n//   isCollectionLoaded: selectIsCollectionsLoaded\n// })\n\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/mac/PycharmProjects/Hackathon/hack/Reverse-Image-Search-Ecommerce/React/src/pages/shop/shop.component.jsx"],"names":["React","Route","ProductContainer","CollectionsOverviewContainer","CollectionPageContainer","selectIsCollectionFetching","selectIsCollectionsLoaded","fetchCollectionsStartAsync","connect","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionLoaded","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,gBAAP,MAA6B,4CAA7B;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC,C,CAEA;AAEA;;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,mCAAtE;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAGA;AACA;AACA;;AAGA,MAAMC,QAAN,SAAuBT,KAAK,CAACU,SAA7B,CAAsC;AAEpCC,EAAAA,iBAAiB,GAAG;AAClB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,UAAM;AAACJ,MAAAA;AAAD,QAA+B,KAAKK,KAA1C;AACAL,IAAAA,0BAA0B;AAC3B;;AAEDM,EAAAA,MAAM,GAAE;AACN,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,oBAAR;AAA8BC,MAAAA;AAA9B,QAAoD,KAAKJ,KAA/D;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAFtB,CAGE;AAHF;AAIE,MAAA,SAAS,EAAEd,4BAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,eAOF,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEW,KAAK,CAACG,IAAK,gBAFtB,CAGE;AAHF;AAIE,MAAA,SAAS,EAAEb,uBAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPE,eAaF,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEU,KAAK,CAACG,IAAK,uBADtB,CAEE;AAFF;AAGE,MAAA,SAAS,EAAEf,gBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbE,CADF;AAqBD;;AApDmC,C,CAuDtC;AACA;AACA;AACA;;;AAEA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACtCZ,EAAAA,0BAA0B,EAAG,MAAMY,QAAQ,CAACZ,0BAA0B,EAA3B;AADL,CAAL,CAAnC;;AAIA,eAAeC,OAAO,CAAC,IAAD,EAAMU,kBAAN,CAAP,CAAiCT,QAAjC,CAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport ProductContainer from '../../components/product/product.container';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPageContainer from '../collection/collection.container';\n\n// import WithSpinner from './../../components/with-spinner/with-spinner.component';\n\n// import { createStructuredSelector } from 'reselect';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from './../../redux/shop/shop.selectors';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { connect } from 'react-redux';\n\n\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n// const ProductWithSpinner = WithSpinner(Product);\n\n\nclass ShopPage extends React.Component{\n\n  componentDidMount() {\n    // const {updateCollections} = this.props;\n    // const CollectionRef = firestore.collection('collections');\n\n    //METHOD 1 ORIGINAL WAY TAUGHT\n    // this.unsubscribeFromSnapshot = CollectionRef.onSnapshot(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // })\n\n    //METHOD 2 - USING PROMISES\n    // CollectionRef.get().then(async snapshot => {\n    //   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //   updateCollections(collectionsMap);\n    //   this.setState({loading: false});\n    // })\n\n    // USING FETCH\n    // fetch('https://firestore.googleapis.com/v1/projects/crown-db/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections))\n\n    const {fetchCollectionsStartAsync} = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render(){\n    const {match, isCollectionFetching, isCollectionLoaded} = this.props;\n    return(\n      <div className='shop-page'>\n    <Route \n      exact \n      path={`${match.path}`} \n      // render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props} />} \n      component={CollectionsOverviewContainer}\n    />\n    <Route \n      exact \n      path={`${match.path}/:collectionId`} \n      // render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionLoaded} {...props}/>}\n      component={CollectionPageContainer}\n    />\n    <Route \n      path={`${match.path}/:collectionId/:anyId`} \n      // render={(props) => <ProductWithSpinner isLoading={!isCollectionLoaded} {...props} />}   \n      component={ProductContainer}\n    />\n  </div>\n    )\n  }\n}\n\n// const mapStateToProps = createStructuredSelector({\n//   isCollectionFetching: selectIsCollectionFetching,\n//   isCollectionLoaded: selectIsCollectionsLoaded\n// })\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync : () => dispatch(fetchCollectionsStartAsync())\n})\n\nexport default connect(null,mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}